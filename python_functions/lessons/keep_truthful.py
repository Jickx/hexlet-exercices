# В этом упражнении вам предстоит попрактиковаться в использовании встроенных
# функций map(), filter(), reduce() (эту нужно импортировать из functools). На
# их основе вам нужно реализовать три функции: keep_truthful(), abs_sum() и
# walk().

# Функция keep_truthful() должна принимать на вход итерируемый источник
# значений и возвращать итератор, отдающий только те значения из источника,
# которые "истинны" (вам пригодится функция operator.truth).

# Функция abs_sum() принимает на вход итерируемый источник чисел. Вернуть же
# функция должна сумму абсолютных значений этих чисел (используйте sum и abs).

# walk() должна для некоего словаря с глубокой вложенностью уметь доставать
# значение по указанному в виде iterable строк пути. В решении можете
# использовать функцию operator.getitem.

# Имейте в виду: мы считаем, что значения по указанному пути всегда доступны и
# сама структура словаря всегда правильная. Это означает, что заранее
# обрабатывать ошибки не нужно. Так что реализуйте "оптимистичное решение".


from functools import reduce
from operator import getitem


def keep_truthful(nums):
    return filter(None, nums)


def abs_sum(nums):
    return sum(map(abs, nums))


def walk(nums, path):
    return reduce(getitem, path, nums)


assert list(keep_truthful([True, False, "", "foo"])) == [True, 'foo']

assert abs_sum([-3, 7]) == 10
assert abs_sum([]) == 0
assert abs_sum([42]) == 42

assert walk({'a': {7: {'b': 42}}}, ["a", 7, "b"]) == 42
assert walk({'a': {7: {'b': 42}}}, ["a", 7]) == {'b': 42}
